require 'rails_helper'

describe TextProcessor do
  describe "Entity Analysis" do
    it 'defaults to the most basic entity analysis' do
      VCR.use_cassette('/alchemy/default') do
        expected = {
          "status" => "OK",
          "usage" =>
            "By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http://www.alchemyapi.com/company/terms.html",
          "url" => "",
          "language" => "english",
          "entities" => [
            {
              "type" => "Person",
              "relevance" => "0.969646",
              "count" => "1",
              "text" => "Nathanael Burt"
            },
            {
              "type" => "City",
              "relevance" => "0.39198",
              "count" => "1",
              "text" => "Irvine",
              "disambiguated" => {
                "subType" => ["AdministrativeDivision"],
                "name" => "Irvine, California",
                "website" => "http://www.cityofirvine.org/",
                "dbpedia" => "http://dbpedia.org/resource/Irvine,_California",
                "freebase" => "http://rdf.freebase.com/ns/m.0d7k1z",
                "geonames" => "http://sws.geonames.org/5359777/",
                "yago" => "http://yago-knowledge.org/resource/Irvine,_California"
              }
            },
            {
              "type" => "StateOrCounty",
              "relevance" => "0.293316",
              "count" => "1",
              "text" => "CA"
            }
          ]
        }
        result = TextProcessor.analyze("1", File.read("./spec/support/test.txt"))
        expect(result).to eq expected
      end
    end

    it 'allows you to specify sentiment' do
      VCR.use_cassette('/alchemy/sentiment_only') do
        expected = {
          "status" => "OK",
          "usage" =>
            "By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http://www.alchemyapi.com/company/terms.html",
          "url" => "",
          "totalTransactions" => "2",
          "language" => "english",
          "entities" => [
            {
              "type" => "Person",
              "relevance" => "0.969646",
              "sentiment" => {"type" => "negative", "score" => "-0.364699"},
              "count" => "1",
              "text" => "Nathanael Burt"
            },
            {
              "type" => "City",
              "relevance" => "0.39198",
              "sentiment" => {
                "type" => "neutral"
              },
              "count" => "1",
              "text" => "Irvine",
              "disambiguated" =>
                {
                  "subType" => ["AdministrativeDivision"],
                  "name" => "Irvine, California",
                  "website" => "http://www.cityofirvine.org/",
                  "dbpedia" => "http://dbpedia.org/resource/Irvine,_California",
                  "freebase" => "http://rdf.freebase.com/ns/m.0d7k1z",
                  "geonames" => "http://sws.geonames.org/5359777/",
                  "yago" => "http://yago-knowledge.org/resource/Irvine,_California"
                }
            },
            {
              "type" => "StateOrCounty",
              "relevance" => "0.293316",
              "sentiment" => {"type" => "neutral"},
              "count" => "1",
              "text" => "CA"
            }
          ]
        }

        result = TextProcessor.analyze("1", File.read("./spec/support/test.txt"), {sentiment: "1"})
        expect(result).to eq expected
      end
    end

    it 'allows you to specify showing source text' do
      VCR.use_cassette('/alchemy/source_text_only') do
        expected = {
          "status" => "OK",
          "usage" =>
            "By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http://www.alchemyapi.com/company/terms.html",
          "url" => "",
          "language" => "english",
          "text" => "Hello, my name is Nathanael Burt. I'm from Irvine, CA.",
          "entities" => [
            {
              "type" => "Person",
              "relevance" => "0.969646",
              "count" => "1",
              "text" => "Nathanael Burt"
            },
            {
              "type" => "City",
              "relevance" => "0.39198",
              "count" => "1",
              "text" => "Irvine",
              "disambiguated" =>
                {
                  "subType" => ["AdministrativeDivision"],
                  "name" => "Irvine, California",
                  "website" => "http://www.cityofirvine.org/",
                  "dbpedia" => "http://dbpedia.org/resource/Irvine,_California",
                  "freebase" => "http://rdf.freebase.com/ns/m.0d7k1z",
                  "geonames" => "http://sws.geonames.org/5359777/",
                  "yago" => "http://yago-knowledge.org/resource/Irvine,_California"
                }
            },
            {
              "type" => "StateOrCounty",
              "relevance" => "0.293316",
              "count" => "1",
              "text" => "CA"
            }
          ]
        }
        result = TextProcessor.analyze("1", File.read("./spec/support/test.txt"), {showSourceText: "1"})
        expect(result).to eq expected
      end
    end

    it 'allows you to disable disambiguate' do
      VCR.use_cassette('/alchemy/disambiguate_only') do
        expected = {
          "status" => "OK",
          "usage" =>
            "By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http://www.alchemyapi.com/company/terms.html",
          "url" => "",
          "language" => "english",
          "entities" => [
            {
              "type" => "Person",
              "relevance" => "0.969646",
              "count" => "1",
              "text" => "Nathanael Burt"
            },
            {
              "type" => "City",
              "relevance" => "0.369666",
              "count" => "1",
              "text" => "Irvine"
            },
            {
              "type" => "StateOrCounty",
              "relevance" => "0.293316",
              "count" => "1",
              "text" => "CA"
            }
          ]
        }
        result = TextProcessor.analyze("1", File.read("./spec/support/test.txt"), {disambiguate: "0"})
        expect(result).to eq expected
      end
    end

    it 'allows you to ignore linkedData' do
      VCR.use_cassette('/alchemy/linkedData_only') do
        expected = {
          "status" => "OK",
          "usage" =>
            "By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http://www.alchemyapi.com/company/terms.html",
          "url" => "",
          "language" => "english",
          "entities" => [
            {
              "type" => "Person",
              "relevance" => "0.969646",
              "count" => "1",
              "text" => "Nathanael Burt"
            },
            {
              "type" => "City",
              "relevance" => "0.39198",
              "count" => "1",
              "text" => "Irvine",
              "disambiguated" => {
                "subType" => ["AdministrativeDivision"],
                "name" => "Irvine, California",
                "website" => "http://www.cityofirvine.org/"
              }
            },
            {
              "type" => "StateOrCounty",
              "relevance" => "0.293316",
              "count" => "1",
              "text" => "CA"
            }
          ]
        }
        result = TextProcessor.analyze("1", File.read("./spec/support/test.txt"), {linkedData: "0"})
        expect(result).to eq expected
      end
    end

    it 'allows you to ignore coreference' do
      VCR.use_cassette('/alchemy/coreference_only') do
        expected = {
          "status" => "OK",
          "usage" =>
            "By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http://www.alchemyapi.com/company/terms.html",
          "url" => "",
          "language" => "english",
          "entities" => [
            {
              "type" => "Person",
              "relevance" => "0.969646",
              "count" => "1",
              "text" => "Nathanael Burt"
            },
            {
              "type" => "City",
              "relevance" => "0.39198",
              "count" => "1",
              "text" => "Irvine",
              "disambiguated" => {
                "subType" => ["AdministrativeDivision"],
                "name" => "Irvine, California",
                "website" => "http://www.cityofirvine.org/",
                "dbpedia" => "http://dbpedia.org/resource/Irvine,_California",
                "freebase" => "http://rdf.freebase.com/ns/m.0d7k1z",
                "geonames" => "http://sws.geonames.org/5359777/",
                "yago" => "http://yago-knowledge.org/resource/Irvine,_California"
              }
            },
            {
              "type" => "StateOrCounty",
              "relevance" => "0.293316",
              "count" => "1",
              "text" => "CA"
            }
          ]
        }

        result = TextProcessor.analyze("1", File.read("./spec/support/test.txt"), {coreference: "0"})
        expect(result).to eq expected
      end
    end

    it 'allows you to specify quotations' do
      VCR.use_cassette('/alchemy/quotations_only') do
        expected = {
          "status" => "OK",
          "usage" =>
            "By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http://www.alchemyapi.com/company/terms.html",
          "url" => "",
          "language" => "english",
          "entities" => [
            {"type" => "Person",
             "relevance" => "0.33",
             "count" => "2",
             "text" => "Nathanael Burt",
             "quotations" => [
               {
                 "quotation" => "Nathanael Burt said: \"Hello, my name is Nathanael Burt\""
               }
             ]
            }
          ]
        }
        result = TextProcessor.analyze("1", File.read("./spec/support/test_2.txt"), {quotations: "1"})
        expect(result).to eq expected
      end
    end

    it 'allows you to specify the maxRetrieve value' do
      VCR.use_cassette('/alchemy/max_retrieve_only') do
        expected = {
          "status" => "OK",
          "usage" =>
            "By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http://www.alchemyapi.com/company/terms.html",
          "url" => "",
          "language" => "english",
          "entities" => [
            {
              "type" => "Person",
              "relevance" => "0.969646",
              "count" => "1",
              "text" => "Nathanael Burt"
            }
          ]
        }
        result = TextProcessor.analyze("1", File.read("./spec/support/test.txt"), {maxRetrieve: "1"})
        expect(result).to eq expected
      end
    end

    it 'can take multiple parameters' do
      VCR.use_cassette('/alchemy/multiple_options') do
        expected = {
          "status" => "OK",
          "usage" =>
            "By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http://www.alchemyapi.com/company/terms.html",
          "url" => "",
          "totalTransactions" => "2",
          "language" => "english",
          "text" => "Hello, my name is Nathanael Burt. I'm from Irvine, CA.",
          "entities" => [
            {
              "type" => "Person",
              "relevance" => "0.969646",
              "sentiment" => {"type" => "negative", "score" => "-0.364699"},
              "count" => "1",
              "text" => "Nathanael Burt"},
            {
              "type" => "City",
              "relevance" => "0.39198",
              "sentiment" => {"type" => "neutral"},
              "count" => "1",
              "text" => "Irvine",
              "disambiguated" => {
                "subType" => ["AdministrativeDivision"],
                "name" => "Irvine, California",
                "website" => "http://www.cityofirvine.org/",
                "dbpedia" => "http://dbpedia.org/resource/Irvine,_California",
                "freebase" => "http://rdf.freebase.com/ns/m.0d7k1z",
                "geonames" => "http://sws.geonames.org/5359777/",
                "yago" => "http://yago-knowledge.org/resource/Irvine,_California"
              }
            }
          ]
        }
        result = TextProcessor.analyze("1", File.read("./spec/support/test.txt"), {maxRetrieve: "2", showSourceText: "1", sentiment: "1"})
        expect(result).to eq expected
      end
    end
  end
end