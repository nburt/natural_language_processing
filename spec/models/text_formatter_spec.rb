require 'rails_helper'

describe TextFormatter do
  it 'returns an array of hashes, if two keywords are the same, it returns the one with the highest relevance' do
    entities = {
      "status" => "OK",
      "usage" =>
        "By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http://www.alchemyapi.com/company/terms.html",
      "url" => "",
      "language" => "english",
      "entities" => [
        {
          "type" => "Person",
          "relevance" => "0.969646",
          "count" => "1",
          "text" => "Nathanael Burt"
        },
        {
          "type" => "City",
          "relevance" => "0.369666",
          "count" => "1",
          "text" => "Irvine",
        },
        {
          "type" => "City",
          "relevance" => "0.324763",
          "count" => "1",
          "text" => "washington",
        },
        {
          "type" => "StateOrCounty",
          "relevance" => "0.293316",
          "count" => "1",
          "text" => "CA"
        }
      ]
    }

    keywords = {
      "status" => "OK",
      "usage" => "By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http://www.alchemyapi.com/company/terms.html",
      "url" => "",
      "language" => "english",
      "keywords" => [
        {
          "text" => "Nathanael Burt",
          "relevance" => "0.948501"
        },
        {
          "text" => "Washington",
          "relevance" => "0.224763"
        },
        {
          "text" => "Irvine",
          "relevance" => "0.618389"
        },
        {
          "text" => "CA",
          "relevance" => "0.432386"
        }
      ]
    }

    response = Struct.new(:entities, :keywords)
    input_struct = response.new(entities, keywords)

    output = [
      {
        text: "Nathanael Burt",
        count: 1,
        relevance: "0.969646"
      },
      {
        text: "Irvine",
        count: nil,
        relevance: "0.618389"
      },
      {
        text: "CA",
        count: nil,
        relevance: "0.432386"
      },
      {
        text: "washington",
        count: 1,
        relevance: "0.324763"
      }
    ]

    expect(TextFormatter.format(input_struct)).to eq output
  end
end